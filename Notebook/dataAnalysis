{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6197c1b3",
   "metadata": {},
   "source": [
    "<h1>Sentiment analysis</h1>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "25572496",
   "metadata": {},
   "source": [
    "<h3>Import delle librerie e del dataset</h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a84aeb91",
   "metadata": {},
   "outputs": [],
   "source": [
    "#import primari\n",
    "import pandas as pd\n",
    "import nltk\n",
    "df = pd.read_csv(\"dataset_italianoEinglese-UPDATED_2023-6-16.csv\", low_memory=False)\n",
    "df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ca64c20d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Altri import necessari\n",
    "import re\n",
    "from wordcloud import WordCloud\n",
    "import matplotlib.pyplot as plt\n",
    "nltk.download('stopwords')\n",
    "from nltk.corpus import stopwords\n",
    "from collections import Counter"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ffe2a636",
   "metadata": {},
   "source": [
    "<p>Tokenizzazione del testo con creazione di colonna specifica</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "441a34d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['tokens'] = df['tweetText'].apply(nltk.word_tokenize)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d0d4a5e0",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "350bc057",
   "metadata": {},
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\", category=UserWarning, module=\"matplotlib\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "25c9ac71",
   "metadata": {},
   "source": [
    "<h3>Suddivisione dataset in italiano e inglese</h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "84cb36b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "def filtroLingua(df,lang):\n",
    "    return df[df['lang'] == lang]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "82b03373",
   "metadata": {},
   "outputs": [],
   "source": [
    "dfIT = filtroLingua(df, 'it')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a03e85e3",
   "metadata": {},
   "outputs": [],
   "source": [
    "dfEN = filtroLingua(df, 'en')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "95bd2f1d",
   "metadata": {},
   "outputs": [],
   "source": [
    "dfIT.shape #verifico la dimensione"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b184f836",
   "metadata": {},
   "outputs": [],
   "source": [
    "dfEN.shape #verifico la dimensione"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d185f81e",
   "metadata": {},
   "source": [
    "<h3>Rimozione stopwords</h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0401bdce",
   "metadata": {},
   "outputs": [],
   "source": [
    "from nltk.corpus import stopwords\n",
    "\n",
    "lang = input(\"choose a lang: \")\n",
    "stop_words = set(stopwords.words(lang))  # Import stopwords for the chosen language\n",
    "\n",
    "def cleaning_stopwords(text):\n",
    "    return \" \".join([word for word in str(text).split() if word not in stop_words])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "64cf8231",
   "metadata": {},
   "outputs": [],
   "source": [
    "dfEN.loc[:, 'tweetText'] = dfEN['tweetText'].apply(lambda x: cleaning_stopwords(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "360ae51e",
   "metadata": {},
   "outputs": [],
   "source": [
    "dfEN['tweetText'].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bbd5e4ec",
   "metadata": {},
   "outputs": [],
   "source": [
    "def removeUrls(text):\n",
    "    return re.sub('http://\\S+|https://\\S+', '', text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5c50b24a",
   "metadata": {},
   "outputs": [],
   "source": [
    "dfEN.loc[:, 'tweetText'] = dfEN['tweetText'].apply(lambda x: removeUrls(x))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fc1e3eb3",
   "metadata": {},
   "source": [
    "<h2>WordCloud sulla colonna di testo</h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "92271345",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Join the different processed titles together.\n",
    "def createLongString(data):\n",
    "    long_string = ','.join(list(data['tweetText'].values))\n",
    "    return long_string"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4631d514",
   "metadata": {},
   "outputs": [],
   "source": [
    "str_long = createLongString(dfEN)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "80a8892c",
   "metadata": {},
   "outputs": [],
   "source": [
    "str_long"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "66b40a89",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Generate the word cloud\n",
    "wc = WordCloud(\n",
    "    background_color='white',\n",
    "    colormap='coolwarm',\n",
    "    stopwords=['meta'],\n",
    "    width=1000,\n",
    "    height=700,\n",
    "    max_words=100,  # Maximum number of words to display\n",
    "    max_font_size=150,  # Maximum font size for the words\n",
    "    random_state=42,  # Set a random seed for reproducibility\n",
    "    contour_color='steelblue',  # Color of the word cloud contour\n",
    "    contour_width=2,  # Width of the word cloud contour\n",
    ").generate(str_long)\n",
    "\n",
    "# Display the word cloud\n",
    "plt.imshow(wc, interpolation='bilinear')\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a9d213d7",
   "metadata": {},
   "source": [
    "<h2>Analisi sugli Hashtag (mista per italiano e inglese)</h2>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dfe36a87",
   "metadata": {},
   "source": [
    "<p>Questa analisi è valida per il dataset contenente una colonna per gli hashtags</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "afca0721",
   "metadata": {},
   "outputs": [],
   "source": [
    "exploded_df = df.explode('hashtags')\n",
    "hashtags_counts = exploded_df['hashtags'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6821d209",
   "metadata": {},
   "outputs": [],
   "source": [
    "hashtags_counts"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c620b2a4",
   "metadata": {},
   "source": [
    "<p>Venti hashtags/coppie di hashtags più menzionati</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a458953d",
   "metadata": {},
   "outputs": [],
   "source": [
    "top_20_hashtags = hashtags_counts.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e50ad0ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "top_20_hashtags"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "df5506e6",
   "metadata": {},
   "source": [
    "<p>Estrazione degli hashtag dalla colonna di testo (valido per qualsiasi dataset)</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ce7daaca",
   "metadata": {},
   "outputs": [],
   "source": [
    "def findHashtags(data):\n",
    "    hashtags = data['tweetText'].apply(lambda x: re.findall(r'\\#\\w+', x)) #trova gli hashtags con espr regolare\n",
    "    all_hashtags = [tag for sublist in hashtags for tag in sublist]\n",
    "    counts = Counter(listaHAshtags)\n",
    "    return counts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "61068507",
   "metadata": {},
   "outputs": [],
   "source": [
    "coll = findHashtags(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "62119953",
   "metadata": {},
   "outputs": [],
   "source": [
    "for count in coll: print(count)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19b3dfa3",
   "metadata": {},
   "source": [
    "<p><strong>Mostro hashtag più usato</strong></p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a4ebda43",
   "metadata": {},
   "outputs": [],
   "source": [
    "most_common_hashtag = coll.most_common(1)[0][0]\n",
    "print(\"L'hashtag più usato nel dataset è: \"+ most_common_hashtag)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "90104169",
   "metadata": {},
   "source": [
    "<p><strong>Mostro i 20 hashtags meno usati</strong></p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e57dda7f",
   "metadata": {},
   "outputs": [],
   "source": [
    "def showVals(collection):\n",
    "    for value, count in collection:\n",
    "        print(f\"Value: {value}, Count: {count}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8eae506d",
   "metadata": {},
   "outputs": [],
   "source": [
    "least_common_values = coll.most_common()[:-21:-1]\n",
    "showVals(least_common_values)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c44c702",
   "metadata": {},
   "source": [
    "<p><strong>Mostro i 20 hashtags più usati</strong></p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8fb70d90",
   "metadata": {},
   "outputs": [],
   "source": [
    "top_values = coll.most_common(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "26438f6b",
   "metadata": {},
   "outputs": [],
   "source": [
    "showVals(top_values)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5536ebc3",
   "metadata": {},
   "source": [
    "<h2>Generazione dei bigrammi</h2>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6495e3",
   "metadata": {},
   "source": [
    "<p><i>Attenzione, usare il filtro lingua</i></p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "76d8609c",
   "metadata": {},
   "outputs": [],
   "source": [
    "from nltk import ngrams"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ab4d999d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to generate bigrams from a text\n",
    "def generate_bigrams(text):\n",
    "    tokens = nltk.word_tokenize(text)\n",
    "    bigrams = list(ngrams(tokens, 2))\n",
    "    return bigrams\n",
    "\n",
    "# Apply the function to create a new column 'bigrams'\n",
    "def applyBigrams(dfLINGUA):\n",
    "    dfLINGUA['bigrams'] = dfLINGUA['tweetText'].apply(generate_bigrams)\n",
    "    return dfLINGUA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "51140a6e",
   "metadata": {},
   "outputs": [],
   "source": [
    "dfEN = applyBigrams(dfEN)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5e21846f",
   "metadata": {},
   "outputs": [],
   "source": [
    "dfEN.head(20)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fa6d05d8",
   "metadata": {},
   "source": [
    "<h2>Progressione degli hashtags nel tempo</h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "027fb7a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['date'] = pd.to_datetime(df['date'], utc=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d01d3c50",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(df.dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eb684fd2",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Count'] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "033d4acc",
   "metadata": {},
   "outputs": [],
   "source": [
    "grouped = df.groupby([df['date'].dt.date, 'hashtags']).sum().reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "26e53517",
   "metadata": {},
   "outputs": [],
   "source": [
    "pivot_df = grouped.pivot(index='date', columns='hashtags', values='Count').fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3b13a47c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot the progression of hashtags over time using a line plot\n",
    "pivot_df.plot(kind='line', figsize=(10, 6))\n",
    "plt.xlabel('Time', fontname = 'Arial')\n",
    "plt.ylabel('Count', fontname = 'Arial')\n",
    "plt.title('Hashtag Progression Over Time', fontname = 'Arial')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b5000b80",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
